setwd("C:/Users/hengj/Desktop/NM2207/Week 3/Code Along")
# Load package tidyverse
library(tidyverse)
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv(cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv(cat-lovers.)
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv(cat-lovers)
setwd("C:/Users/hengj/Desktop/NM2207/Week 3/Code Along")
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv(cat-lovers)
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv(cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
read.csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
df(df) <- ("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
df <- read.csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df(cat_lovers$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df(cat_lovers$number_of_cats)
mean(df(cat_lovers$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df(name$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df(name$number_of_cats))
# Compute the mean of the number of cats: execute this command
df(mean(name$number_of_cats))
# Compute the mean of the number of cats: execute this command
mean(df$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df$number_of_cats)
# import the cat-lovers data from the csv file you downloaded from canvas
df <- read.csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(df$number_of_cats)
mean(df$number_of_cats)
# import the cat-lovers data from the csv file you downloaded from canvas
df <- data.frame(read.csv("cat-lovers.csv"))
# Compute the mean of the number of cats: execute this command
mean(df$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(df$number_of_cats)
View(df)
# Get more information about the mean() command using ? operator
?mean
# Convert the variable number_of_cats using as.integer()
as.integer(df$number_of_cats)
# Display the elements of the column number_of_cats
numcol(df$number_of_cats)
# Display the elements of the column number_of_cats
col(df$number_of_cats)
# Display the elements of the column number_of_cats
ncol(df$number_of_cats)
# Display the elements of the column number_of_cats
str(df$number_of_cats)
View(df)
# Display the elements of the column number_of_cats
view(df$number_of_cats)
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.numeric(df$number_of_cats)
view(df$number_of_cats)
view(as.numeric(df$number_of_cats))
# Type of the empty vector
typeof(x)
# Empty vector
c(x)
# Empty vector
x <- c()
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Display the contents of x
print(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("typecharacter")
# Method 1
x<-vector("character")
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x <- character(a)
# Method 2
x <- character(1)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 1
x<-vector("character",length(5))
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x <- character(5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 3
x<-character(TRUE,FALSE,TRUE,FALSE,TRUE)
# Method 3
x<-character(A,B,C,D,E)
# Method 3
x<-character(A)
# Method 3
x<-character('a','b')
# Method 3
x<-c('a','b','c','d','e')
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 3
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Method 3
x<-c(1,1.5,2,2.5,3)
# Display the contents of x
print(x)
# Display the type of x
typeof(x)
# Create a vector
x<-c()
# Check the type of x
typeof(x)
# Add a character to the vector
x<-c(a)
# Add a character to the vector
x<-c('a')
# Check the type of x
typeof(x)
# Create a vector
x<-c()
# Check the type of x
typeof(x)
# Add a number to the vector
x<-c(1)
# Check the type of x
typeof(x)
# Check the type of x
typeof(x)
# Check the type of x
typeof(x)
# Check the type of x
typeof(x)
# Add a logical value to the vector
x<-(FALSE)
# Check the type of x
typeof(x)
# Add a logical value to the vector
x<-(F)
# Check the type of x
typeof(x)
# Create a vector
X<-c()
# Check the type of x
typeof(x)
# Add a number to the vector
x<-c(0L)
# Check the type of x
typeof(x)
# Check the type of x
typeof(x)
# Convert the vector to type character
x<-character()
# Check the type of x
typeof(x)
# Create a vector
x<-c()
# Check the type of x
typeof(x)
# Convert the vector to type double
x<-double
# Check the type of x
typeof(x)
# Convert the vector to type double
x<-double()
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
index(3)
# Access one element with index 3
index(x)
# Access one element with index 3
view(x$3)
# Access one element with index 3
view(x$3)
# Access one element with index 3
view(x)
# Access one element with index 3
x(3)
# Access one element with index 3
view(x(3))
# Access one element with index 3
view(3
# Access one element with index 3
view(3)
# Access one element with index 3
myList(1)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
X[2:4]
# Access elements with consecutive indices, 2 to 4: 2,3,4
X[2,3,4]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2,3,4]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[c(2,3,4)]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[c(2-4)]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[c(2:4)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<0]
# Access elements using the conditional operator <
x[x>0]
# Access elements using the conditional operator <
x[x>2]
# Access elements using the conditional operator <
x[x>0]
x[x<10]
x[x<9]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
print(mypie)
# Print the names of the list
print(my_pie)
# Load package tidyverse
library("tidyverse"")
